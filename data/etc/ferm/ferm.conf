{#
 # Author:      Michael Lustfield (MTecknology)
 # License:     CC BY-NC-ND 4.0
 #              https://creativecommons.org/licenses/by-nc-nd/4.0/
 # Description: This is a simple example of using ferm to manage IP tables rules.
 #              It should be easily adapted to many different situations.
 #}

domain (ip ip6) {
    table filter {
        {% if knock %}
        # TEMPLATE: PORT KNOCKING CHAINS{% for seq in knock['authorder'] %}{% set port = seq.split('/') %}
        chain PORTAUTH_{{ loop.index }} {
            protocol {{ port[0] }} {
                mod recent name "portauth_{{ loop.index }}" set NOP;{% if loop.index != 1 %}
                mod recent name "portauth_{{ loop.index - 1 }}" remove NOP;{% endif %}
            }
            DROP;
        }{% endfor %}{% endif %}

        {% if salt['pkg.version']('sshguard') %}
        chain sshguard { }
        {% endif %}

        chain INPUT {
            policy DROP;

            # connection tracking
            mod state state INVALID DROP;
            mod state state (ESTABLISHED RELATED) ACCEPT;

            # allow local packet
            interface lo ACCEPT;

            # respond to ping
            proto icmp ACCEPT; 

            # allow local SSH connections
            proto tcp dport ssh saddr 10.0.0.0/8 ACCEPT;

            # allow spectrum/snmp queries
            proto udp dport snmp ACCEPT;

            # TEMPLATE: Packages
            {% if salt['pkg.version']('sshguard') %}
            jump sshguard;
            {% endif -%}

            {%- if salt['pkg.version']('nginx') or
                  salt['pkg.version']('nginx-light') or
                  salt['pkg.version']('nginx-full') -%}
            # allow HTTP connections
            proto tcp dport (http https) ACCEPT;
            {% endif -%}

            {%- if salt['pkg.version']('openvpn') %}
            # allow openvpn
            {% for _, group in salt['pillar.get']('openvpn:groups', {}).items() %}{%if group['role'] == 'server' %}
            proto udp dport {{ group['port'] }} ACCEPT;{% endif %}{% endfor %}
            {%- endif %}

            {%- if salt['pkg.version']('postfix') %}
            # allow smtp
            proto tcp dport (25) ACCEPT;
            {% endif -%}

            {%- if salt['pkg.version']('proxmox-ve') %}
            # allow proxmox web ui
            proto tcp dport (8006) ACCEPT;
            {% endif -%}

            {%- if salt['pkg.version']('salt-master') %}
            # allow salt
            proto tcp dport (4505 4506) ACCEPT;
            {% endif -%}

            {%- if salt['pkg.version']('tftpd-hpa') %}
            # allow tftpd
            proto (tcp udp) dport 69 ACCEPT;
            {% endif -%}

            {%- if salt['pkg.version']('tor') %}
            # allow tor
            proto tcp dport 9050 ACCEPT;
            {% endif -%}

            {%- if salt['pkg.version']('unifi') %}
            # allow unifi
            proto tcp dport (8080 8880 8843 8443) ACCEPT;
            proto udp dport (3478 10001) ACCEPT;
            {%- endif %}

            # TEMPLATE: Hosts

            {%- if grains.get('id') == 'git.lustfield.net' %}
            # host: git.lustfield.net
            proto tcp dport (22 80 443) ACCEPT;
            {% endif -%}

            {%- if grains.get('id') == 'log.lustfield.net' %}
            # allow syslog connections
            proto (udp tcp) dport 514 ACCEPT;
            {%- endif %}

            {%- if 'inbound' in ferm_rules %}
            # TEMPLATE: ferm_rules
            {% for r in ferm_rules['inbound'] %}{{ r }}
            {% endfor %}{%- endif %}

            {% if knock -%}
            # TEMPLATE: PORT KNOCKING{% for seq in knock['authorder'] %}{% set port = seq.split('/') %}
              {%- if loop.index == 1 %}
            proto {{ port[0] }} dport {{ port[1] }} mod recent set name portauth_1 jump PORTAUTH_{{ loop.index }};
              {%- else %}
            proto {{ port[0] }} dport {{ port[1] }} mod recent rcheck name portauth_{{ loop.index - 1 }} seconds 7 jump PORTAUTH_{{ loop.index }};
              {%- endif %}
              {%- if loop.last %}
            # Set grants after completed sequence
            proto {{ knock['grants']['proto'] }} {
                dport {{ knock['grants']['port'] }} {
                    mod recent rcheck name "portauth_{{ loop.index }}" seconds 120 ACCEPT;
                    DROP;
                }
            }
              {%- endif %}
            {%- endfor %}
            {%- endif %}
        }
        chain OUTPUT {
            policy ACCEPT;

            # connection tracking
            mod state state INVALID DROP;
            mod state state (ESTABLISHED RELATED) ACCEPT;

            {% if 'outbound' in ferm_rules %}
            # TEMPLATE: ferm_rules
            {% for r in ferm_rules['outbound'] %}{{ r }}
            {% endfor %}{% endif %}
        }
        chain FORWARD {
            policy DROP;

            # connection tracking
            mod state state INVALID DROP;
            mod state state (ESTABLISHED RELATED) ACCEPT;

            {% if 'forward' in ferm_rules %}
            # TEMPLATE: ferm_rules
            {% for r in ferm_rules['forward'] %}{{ r }}
            {% endfor %}{% endif %}
        }
    }
}
